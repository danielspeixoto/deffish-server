// Code generated by MockGen. DO NOT EDIT.
// Source: src/boundary//tag/Boundary.go

// Package tag is a generated GoMock package.
package tag

import (
	aggregates "deffish-server/src/aggregates"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockIRepository) Insert(arg0 aggregates.Tag) (aggregates.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(aggregates.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockIRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIRepository)(nil).Insert), arg0)
}

// GetByName mocks base method
func (m *MockIRepository) GetByName(arg0 string) (aggregates.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(aggregates.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockIRepositoryMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIRepository)(nil).GetByName), arg0)
}

// SuggestionsBySubStr mocks base method
func (m *MockIRepository) SuggestionsBySubStr(arg0 string) ([]aggregates.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestionsBySubStr", arg0)
	ret0, _ := ret[0].([]aggregates.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestionsBySubStr indicates an expected call of SuggestionsBySubStr
func (mr *MockIRepositoryMockRecorder) SuggestionsBySubStr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestionsBySubStr", reflect.TypeOf((*MockIRepository)(nil).SuggestionsBySubStr), arg0)
}

// MockIByNameUseCase is a mock of IByNameUseCase interface
type MockIByNameUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIByNameUseCaseMockRecorder
}

// MockIByNameUseCaseMockRecorder is the mock recorder for MockIByNameUseCase
type MockIByNameUseCaseMockRecorder struct {
	mock *MockIByNameUseCase
}

// NewMockIByNameUseCase creates a new mock instance
func NewMockIByNameUseCase(ctrl *gomock.Controller) *MockIByNameUseCase {
	mock := &MockIByNameUseCase{ctrl: ctrl}
	mock.recorder = &MockIByNameUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIByNameUseCase) EXPECT() *MockIByNameUseCaseMockRecorder {
	return m.recorder
}

// ByName mocks base method
func (m *MockIByNameUseCase) ByName(name string) (aggregates.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByName", name)
	ret0, _ := ret[0].(aggregates.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByName indicates an expected call of ByName
func (mr *MockIByNameUseCaseMockRecorder) ByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByName", reflect.TypeOf((*MockIByNameUseCase)(nil).ByName), name)
}

// MockIUploadUseCase is a mock of IUploadUseCase interface
type MockIUploadUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUploadUseCaseMockRecorder
}

// MockIUploadUseCaseMockRecorder is the mock recorder for MockIUploadUseCase
type MockIUploadUseCaseMockRecorder struct {
	mock *MockIUploadUseCase
}

// NewMockIUploadUseCase creates a new mock instance
func NewMockIUploadUseCase(ctrl *gomock.Controller) *MockIUploadUseCase {
	mock := &MockIUploadUseCase{ctrl: ctrl}
	mock.recorder = &MockIUploadUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUploadUseCase) EXPECT() *MockIUploadUseCaseMockRecorder {
	return m.recorder
}

// Upload mocks base method
func (m *MockIUploadUseCase) Upload(arg0 aggregates.Tag) (aggregates.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(aggregates.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockIUploadUseCaseMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockIUploadUseCase)(nil).Upload), arg0)
}

// MockISuggestionsBySubStr is a mock of ISuggestionsBySubStr interface
type MockISuggestionsBySubStr struct {
	ctrl     *gomock.Controller
	recorder *MockISuggestionsBySubStrMockRecorder
}

// MockISuggestionsBySubStrMockRecorder is the mock recorder for MockISuggestionsBySubStr
type MockISuggestionsBySubStrMockRecorder struct {
	mock *MockISuggestionsBySubStr
}

// NewMockISuggestionsBySubStr creates a new mock instance
func NewMockISuggestionsBySubStr(ctrl *gomock.Controller) *MockISuggestionsBySubStr {
	mock := &MockISuggestionsBySubStr{ctrl: ctrl}
	mock.recorder = &MockISuggestionsBySubStrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISuggestionsBySubStr) EXPECT() *MockISuggestionsBySubStrMockRecorder {
	return m.recorder
}

// GetSuggestions mocks base method
func (m *MockISuggestionsBySubStr) GetSuggestions(arg0 string) ([]aggregates.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestions", arg0)
	ret0, _ := ret[0].([]aggregates.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions
func (mr *MockISuggestionsBySubStrMockRecorder) GetSuggestions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockISuggestionsBySubStr)(nil).GetSuggestions), arg0)
}

// GetSuggestionsWithQuestions mocks base method
func (m *MockISuggestionsBySubStr) GetSuggestionsWithQuestions(arg0 string) ([]aggregates.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestionsWithQuestions", arg0)
	ret0, _ := ret[0].([]aggregates.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestionsWithQuestions indicates an expected call of GetSuggestionsWithQuestions
func (mr *MockISuggestionsBySubStrMockRecorder) GetSuggestionsWithQuestions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestionsWithQuestions", reflect.TypeOf((*MockISuggestionsBySubStr)(nil).GetSuggestionsWithQuestions), arg0)
}
