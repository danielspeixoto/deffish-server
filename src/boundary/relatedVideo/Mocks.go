// Code generated by MockGen. DO NOT EDIT.
// Source: src/boundary//relatedVideo/Boundary.go

// Package relatedVideo is a generated GoMock package.
package relatedVideo

import (
	aggregates "deffish-server/src/aggregates"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetRelatedVideos mocks base method
func (m *MockIRepository) GetRelatedVideos(id aggregates.Id, start, count int) ([]aggregates.RelatedVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelatedVideos", id, start, count)
	ret0, _ := ret[0].([]aggregates.RelatedVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelatedVideos indicates an expected call of GetRelatedVideos
func (mr *MockIRepositoryMockRecorder) GetRelatedVideos(id, start, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelatedVideos", reflect.TypeOf((*MockIRepository)(nil).GetRelatedVideos), id, start, count)
}

// MockIFilterByQuestionUseCase is a mock of IFilterByQuestionUseCase interface
type MockIFilterByQuestionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIFilterByQuestionUseCaseMockRecorder
}

// MockIFilterByQuestionUseCaseMockRecorder is the mock recorder for MockIFilterByQuestionUseCase
type MockIFilterByQuestionUseCaseMockRecorder struct {
	mock *MockIFilterByQuestionUseCase
}

// NewMockIFilterByQuestionUseCase creates a new mock instance
func NewMockIFilterByQuestionUseCase(ctrl *gomock.Controller) *MockIFilterByQuestionUseCase {
	mock := &MockIFilterByQuestionUseCase{ctrl: ctrl}
	mock.recorder = &MockIFilterByQuestionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFilterByQuestionUseCase) EXPECT() *MockIFilterByQuestionUseCaseMockRecorder {
	return m.recorder
}

// GetRelatedVideos mocks base method
func (m *MockIFilterByQuestionUseCase) GetRelatedVideos(id aggregates.Id, start, count int) ([]aggregates.RelatedVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelatedVideos", id, start, count)
	ret0, _ := ret[0].([]aggregates.RelatedVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelatedVideos indicates an expected call of GetRelatedVideos
func (mr *MockIFilterByQuestionUseCaseMockRecorder) GetRelatedVideos(id, start, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelatedVideos", reflect.TypeOf((*MockIFilterByQuestionUseCase)(nil).GetRelatedVideos), id, start, count)
}
